from django.views import generic
from django.contrib.auth.decorators import login_required
from django.shortcuts import render
from django.core.signing import Signer
from django.conf import settings

from .decorators import ajax_login_required
from .tasks import pack_folder, upload_folder, delete_folder
from .helpers import get_size, validate_b64folder
from django_ajax.decorators import ajax
from subprocess import check_output
from datetime import datetime
from background_task.models import Task
from background_task.models_completed import CompletedTask
import boto3
import os
import hashlib
import base64


class HomePage(generic.TemplateView):
    """ Home - Generic template """
    template_name = "home.html"

class AboutPage(generic.TemplateView):
    """ About - Generic template """
    template_name = "about.html"

@login_required
def browse(request):
    """ Browse
        - Scans base TRANSMISSION_DOWNLOAD_DIR by directory
        - Calculates directory size
        - Checks for packing status file
        - Checks for uploading status file

        * File checks are generated by MD5 hashes of the directory name
        * Django's Signing library is used when passing directory names as
          functional parameters to prevent exploitation
    """
    base_dir = settings.TRANSMISSION_DOWNLOAD_DIR
    folders = []
    for folder in os.listdir(base_dir):
        folder_path = "{}{}".format(base_dir, folder)
        folder_size = get_size(folder_path)
        folder_timestamp = datetime.fromtimestamp(os.stat(folder_path).st_ctime)

        # Hash used to check file progress for packing and uploading
        # File based status information
        folder_hash = hashlib.md5(folder.encode('UTF-8')).hexdigest()

        # Sign the folder to prevent tampering, folder system could be exploited
        signer = Signer()
        signed_folder = signer.sign(folder)
        folder64 = base64.b64encode(signed_folder.encode('utf-8'))

        # Packed file status check
        packing_file = "{}/{}.packed".format(folder_path, folder_hash)
        is_packed = os.path.exists(packing_file)
        if is_packed:
            # If file is empty packing in progress
            packing_in_progress = os.stat(packing_file).st_size == 0
        else:
            packing_in_progress = False

        # Read packing file for archive name if exists
        archive_name = ""
        if is_packed and not packing_in_progress:
            with open(packing_file, 'r') as archive_info:
                archive_name = archive_info.read()

        # Upload file status check
        uploading_file = "{}/{}.uploaded".format(folder_path, folder_hash)
        is_uploaded = os.path.exists(uploading_file)
        if is_uploaded:
            # If file is empty upload in progress
            upload_in_progress = os.stat(uploading_file).st_size == 0
        else:
            upload_in_progress = False

        folders.append({
            'timestamp': folder_timestamp,
            'name': folder,
            'size': folder_size,
            'folder64': folder64,
            'is_packed': is_packed,
            'packing_in_progress': packing_in_progress,
            'is_uploaded': is_uploaded,
            'upload_in_progress': upload_in_progress,
            'archive_name': archive_name,
        })

    context = {'folders': folders}
    return render(request, 'browse.html', context)

@ajax_login_required
@ajax
def get_s3_files(request):
    """ AJAX: Queries S3 for the given folder, returns links to all files for downloading """
    prefix = request.GET.get("folder", "")
    if not prefix:
        return {'response': 'bad', 'message': 'Invalid request'}

    s3_files = []
    # Query s3 for files with the given prefix
    client = boto3.client('s3')
    for key in client.list_objects(Bucket=settings.TRANSMIT_S3_BUCKET,
                                   Prefix="{}/".format(prefix))['Contents']:
        s3_files.append('{}/{}/{}'.format(client.meta.endpoint_url,
                                          settings.TRANSMIT_S3_BUCKET,
                                          key['Key']))

    s3_files.sort()
    return {'response': 'okay', 'links': s3_files}

@ajax_login_required
@ajax
def get_local_files(request):
    """ AJAX: Retrieves a directory listing of all files for the given folder """
    folder64 = request.GET.get("folder", "")
    folder = validate_b64folder(folder64)
    if not folder:
        return {'response': 'bad', 'message': 'Invalid request'}

    # enumerate folder files recursively
    root_dir = "{}{}".format(settings.TRANSMISSION_DOWNLOAD_DIR, folder)
    local_files = []
    for (root, dirs, files) in os.walk(root_dir):
        for filename in files:
            rel_dir = os.path.relpath(root, root_dir)
            local_files.append(os.path.join(rel_dir, filename))

    return {'response': 'okay', 'files': local_files}

@ajax_login_required
@ajax
def get_task_status(request):
    """ AJAX: Gets the status of a pending background task by hash """
    task_hash = request.GET.get("task_hash", "")
    if not task_hash:
        return {'response': 'bad', 'message': 'Invalid request'}

    # Check if completed
    if CompletedTask.objects.filter(task_hash=task_hash).exists():
        return {'response': 'okay', 'completed': 'true'}
    # Check if pending or in progress
    elif Task.objects.filter(task_hash=task_hash).exists():
        return {'response': 'okay', 'completed': 'false'}
    else:
        return {'response': 'bad',
                'message': 'The given task "{}" cannot be found'.format(task_hash)}

@ajax_login_required
@ajax
def runtask_pack(request):
    """ AJAX: Initiate a packing request for the given folder.  Will be run as a background task """
    # Validate request
    folder64 = request.POST.get("folder", "")
    filename = request.POST.get("filename", "")
    if folder64 == "" and filename == "":
        return {'response': 'bad', 'message': 'Required parameters missing'}

    folder = validate_b64folder(folder64)
    if not folder:
        return {'response': 'bad', 'message': 'Invalid request'}

    # Invoke background task for packing
    queued_task = pack_folder(folder, filename)
    return {'response': 'okay', 'task_hash': queued_task.task_hash}

@ajax_login_required
@ajax
def runtask_upload(request):
    """ AJAX: Initiate a upload request for the given folder.  Will be run as a background task """
    # Validate request
    folder64 = request.POST.get("folder", "")
    folder = validate_b64folder(folder64)
    if not folder:
        return {'response': 'bad', 'message': 'Invalid request'}

    # Invoke background task for uploading
    queued_task = upload_folder(folder)
    return {'response': 'okay', 'task_hash': queued_task.task_hash}

@ajax_login_required
@ajax
def runtask_delete(request):
    """ AJAX: Initiate a purge request for the given folder.  Will be run as a background task """
    # Validate request
    folder64 = request.POST.get("folder", "")
    folder = validate_b64folder(folder64)
    if not folder:
        return {'response': 'bad', 'message': 'Invalid request'}

    # Invoke background task for deletion
    queued_task = delete_folder(folder)
    return {'response': 'okay', 'task_hash': queued_task.task_hash}
